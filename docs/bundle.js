(()=>{"use strict";var e={91:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e):e}},579:(e,t,r)=>{e.exports=r.p+"7aaeff57cf1b16b7b016.svg"},899:(e,t,r)=>{e.exports=r.p+"9fb04143afda292a0572.svg"},22:(e,t,r)=>{e.exports=r.p+"a1ac5b21e2f91f0baa1c.png"},767:(e,t,r)=>{e.exports=r.p+"aab06aca01fa84923598.png"},165:(e,t,r)=>{e.exports=r.p+"72f1877d4b233fafa6f1.png"},861:(e,t,r)=>{e.exports=r.p+"0c984eefe0c911c8f7c9.png"},103:(e,t,r)=>{e.exports=r.p+"b228189d246452da5fe4.png"},194:(e,t,r)=>{e.exports=r.p+"90533dbfe3705cf0369d.png"}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}r.m=e,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.b=document.baseURI||self.location.href,(()=>{document.body.classList.add("page");var e=document.createElement("main");function t(e){var t=document.createElement("template");return t.innerHTML=e,t.content.cloneNode(!0)}e.classList.add("main"),e.id="main",document.body.append(e);var n=r(91),o=r.n(n),i=new URL(r(579),r.b);const a='<header class="header"> <div class="container header__container"> <div class="header__logo-wrapper"> <a href="#main"> <img src="'+o()(i)+'" width="184" height="45" alt="page logo"/> </a> </div> <nav class="header__nav"> <ul class="header__list"> <li class="header__list-item"> <a href="#problem" class="header__link">the problem</a> <span class="header__delimiter">|</span> </li> <li class="header__list-item"> <a href="#pipercoin" class="header__link">PiedPiperCoin</a> <span class="header__delimiter">|</span> </li> <li class="header__list-item"> <a href="#team" class="header__link">the team</a> </li> </ul> </nav> <div class="header__burger-btn header__hidden-element"> <div class="header__burger-btn-line"></div> <div class="header__burger-btn-line"></div> <div class="header__burger-btn-line"></div> </div> <div class="header__close-btn header__hidden-element"> <div class="header__close-btn-square"></div> <div class="header__close-btn-square"></div> <div class="header__close-btn-square"></div> <div class="header__close-btn-square"></div> </div> </div> </header>';function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._element=t.querySelector(r),this._hidingClass="header__hidden-element"}var t,r;return t=e,(r=[{key:"show",value:function(){this._element.classList.remove(this._hidingClass)}},{key:"hide",value:function(){this._element.classList.add(this._hidingClass)}}])&&s(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=h(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},p.apply(this,arguments)}function h(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=f(e)););return e}function u(e,t){return u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},u(e,t)}function _(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&u(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return _(this,e)});function a(e,t,r){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e,t))._action=r,n}return t=a,(r=[{key:"show",value:function(){p(f(a.prototype),"show",this).call(this),this._element.addEventListener("mousedown",this._action)}},{key:"hide",value:function(){p(f(a.prototype),"hide",this).call(this),this._element.removeEventListener("mousedown",this._action)}}])&&d(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),a}(c);function v(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function b(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var y=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),b(this,"_switchToMobile",(function(){r._dde.clientWidth<810&&(r._setMobileView(),window.removeEventListener("resize",r._switchToMobile),window.addEventListener("resize",r._switchToDesktop))})),b(this,"_switchToDesktop",(function(){r._dde.clientWidth>810&&(r._setDesktopView(),window.removeEventListener("resize",r._switchToDesktop),window.addEventListener("resize",r._switchToMobile))})),b(this,"_setMobileView",(function(){r._cont.classList.add(r._contMobileClass),r._nav.hide(),r._closeBtn.hide(),r._burgerBtn.show()})),b(this,"_setDesktopView",(function(){r._closeBtn.hide(),r._burgerBtn.hide(),r._logo.show(),r._nav.show(),r._cont.classList.remove(r._contMobileClass)})),b(this,"_openMenu",(function(){r._logo.hide(),r._nav.show(),r._burgerBtn.hide(),r._closeBtn.show()})),b(this,"_closeMenu",(function(){r._nav.hide(),r._logo.show(),r._closeBtn.hide(),r._burgerBtn.show()})),this._dde=document.documentElement,this._header=t,this._cont=this._header.querySelector(".header__container"),this._contMobileClass="header__container_mobile-view",this._nav=new c(this._header,".header__nav"),this._logo=new c(this._header,".header__logo-wrapper"),this._burgerBtn=new m(this._header,".header__burger-btn",this._openMenu),this._closeBtn=new m(this._header,".header__close-btn",this._closeMenu)}var t,r;return t=e,(r=[{key:"init",value:function(){document.documentElement.clientWidth<810?(this._setMobileView(),window.addEventListener("resize",this._switchToDesktop)):window.addEventListener("resize",this._switchToMobile)}}])&&v(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}(),w=t(a);new y(w).init(),document.body.prepend(w),document.querySelector(".main").append(t('<section class="jumbotron"> <div class="container jumbotron__container"> <h1 class="jumbotron__heading">PiperNet Is Here</h1> </div> </section> ')),document.querySelector(".main").append(t('<section class="problem"> <div class="label"> <div class="label__tail" id="problem"></div> </div> <div class="container problem__container"> <h2 class="h2 problem__heading">The Problem</h2> <p class="paragraph"> Beneath the flashy homepages of your favorite sites lurk Hooli™ and other evil corporations out to hoard and sell your most personal data. </p> <p class="paragraph"> What was built to be the ultimate platform for the free sharing of knowledge has turned into a money-hungry monster feasting on our privacy and &nbsp; freedom. </p> <p class="paragraph"> But fear not, for Pied Piper has the answer! And it’s simple:<br/>An autonomous peer-to-peer network featuring distributed storage powered by universal compression, accelerated scheduling allocation, and end-to-end encryption. </p> <p class="paragraph"> Put even simpler — <span class="paragraph_text-style_strong">it’s the internet, completely decentralized.</span> </p> </div> </section> ')),document.querySelector(".main").append(t('<section class="hero"> <div class="container hero__container"> <p class="hero__text"> We’re in this together! All of our computers and phones join in a network to make the strongest supercomputer the world has ever seen. </p> </div> </section> '));var g=new URL(r(899),r.b);const P='<section class="pipercoin"> <div class="label"> <div class="label__tail" id="pipercoin"></div> </div> <div class="container pipercoin__container"> <h2 class="h2 pipercoin__h2">Introducing PiedPiperCoin</h2> <div class="pipercoin__logo-wrapper"> <img width="115" height="115" src="'+o()(g)+'" alt="pipercoin logo"/> </div> <p class="paragraph"> Pied Piper\'s new internet is built <span class="paragraph_text-style_italic">for users, by users.</span><br/> You supply the storage, compute, and networking resources that power our entire decentralized web. </p> <div class="flow-cleaner"></div> <p class="paragraph"> Now there\'s a way to give credit where credit is due. Compute credit, that is! The more you share your device resources, the more PiedPiperCoin you receive. </p> <p class="paragraph"> Whether you\'re a developer with an app ready for market, or just an Average Joe with a smartphone you\'ll love all you can do with PiedPiperCoin. </p> </div> </section> ';document.querySelector(".main").append(t(P));var O=[{photo:r(194),name:"Richard Hendricks",position:"Founder & CEO"},{photo:r(22),name:"Dinesh Chugtai",position:"Senior Programmer"},{photo:r(767),name:"Bertram Gilfoyle",position:"Chief Systems Architect"},{photo:r(861),name:"Jared Dunn",position:"Chief Operating Officer"},{photo:r(103),name:"Monica Hall",position:"Chief Financial Officer"},{photo:r(165),name:"Nelson Bighetti",position:"Majority Investor"}],j=t('<section class="team"> <div class="label"> <div class="label__tail" id="team"></div> </div> <div class="container team__container"> <h2 class="h2 team__heading">The Team</h2> <ul class="team__cards"></ul> </div> </section> '),k=j.querySelector(".team__cards");O.forEach((function(e){var r=t('<li class="team__card"> <div class="team__card-container"> <img class="team__photo" src="#" alt="#" width="168" height="168"/> <span class="team__name"></span> <span class="team__position"></span> </div> </li> '),n=r.querySelector(".team__photo");n.src=e.photo,n.alt="".concat(e.name," photo"),r.querySelector(".team__name").textContent=e.name,r.querySelector(".team__position").textContent=e.position,k.append(r)})),document.querySelector(".main").append(j),document.body.append(t('<footer class="footer"> <div class="container footer__container"> <p class="footer__text"> All other trademarks and copyrights are the property of their respective owners. Use of these names, trademarks and brands does not imply endorsement. </p> </div> </footer> '))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,